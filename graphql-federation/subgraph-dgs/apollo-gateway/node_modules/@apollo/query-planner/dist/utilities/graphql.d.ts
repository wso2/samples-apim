import { ASTKindToNode, ASTNode, DirectiveNode, FieldNode, GraphQLCompositeType, GraphQLDirective, GraphQLField, GraphQLNullableType, GraphQLSchema, ListTypeNode, NamedTypeNode, SelectionNode } from 'graphql';
import { FieldSet } from '../composedSchema';
export declare function getFieldDef(schema: GraphQLSchema, parentType: GraphQLCompositeType, fieldName: string): GraphQLField<any, any> | undefined;
export declare function getResponseName(node: FieldNode): string;
export declare function allNodesAreOfSameKind<T extends ASTNode>(firstNode: T, remainingNodes: ASTNode[]): remainingNodes is T[];
export declare function astFromType(type: GraphQLNullableType): NamedTypeNode | ListTypeNode;
export declare function parseSelections(source: string): ReadonlyArray<SelectionNode>;
export declare function parseFieldSet(source: string): FieldSet;
export declare function getArgumentValuesForDirective(directiveDef: GraphQLDirective, node: {
    directives?: readonly DirectiveNode[];
} & ASTNode): Record<string, any> | undefined;
export declare function getArgumentValuesForRepeatableDirective(directiveDef: GraphQLDirective, node: {
    directives?: readonly DirectiveNode[];
} & ASTNode): Record<string, any>[];
export declare function isASTKind<K extends ASTNode['kind']>(...kinds: K[]): (node: ASTNode) => node is ASTKindToNode[K];
//# sourceMappingURL=graphql.d.ts.map