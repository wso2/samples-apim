"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scope = void 0;
const graphql_1 = require("graphql");
class Scope {
    constructor(context, parentType, directives, enclosing) {
        this.context = context;
        this.parentType = parentType;
        this.directives = directives;
        this.enclosing = enclosing;
        this.cachedIdentityKey = undefined;
    }
    static create(context, parentType) {
        return new Scope(context, parentType, undefined, undefined);
    }
    refine(type, directives) {
        if (directives && directives.length == 0) {
            directives = undefined;
        }
        if (!directives && type === this.parentType) {
            return this;
        }
        return new Scope(this.context, type, directives, Scope.pruneRefinedTypes(this, type));
    }
    static pruneRefinedTypes(toPrune, refiningType) {
        if (!toPrune) {
            return undefined;
        }
        if (!toPrune.directives && graphql_1.isTypeSubTypeOf(toPrune.context.schema, refiningType, toPrune.parentType)) {
            return Scope.pruneRefinedTypes(toPrune.enclosing, refiningType);
        }
        return new Scope(toPrune.context, toPrune.parentType, toPrune.directives, Scope.pruneRefinedTypes(toPrune.enclosing, refiningType));
    }
    isStrictlyRefining(type) {
        let scope = this;
        while (scope) {
            if (scope.parentType !== type && graphql_1.isTypeSubTypeOf(this.context.schema, scope.parentType, type)) {
                return true;
            }
            scope = scope.enclosing;
        }
        return false;
    }
    computePossibleRuntimeTypes() {
        let possibleTypes = this.context.getPossibleTypes(this.parentType);
        let nextScope = this.enclosing;
        while (nextScope) {
            let enclosingPossibleTypes = this.context.getPossibleTypes(nextScope.parentType);
            possibleTypes = possibleTypes.filter(t => enclosingPossibleTypes.includes(t));
            nextScope = nextScope.enclosing;
        }
        return possibleTypes;
    }
    possibleRuntimeTypes() {
        if (!this.cachedRuntimeTypes) {
            this.cachedRuntimeTypes = this.computePossibleRuntimeTypes();
        }
        return this.cachedRuntimeTypes;
    }
    static valueIdentityKey(value) {
        switch (value.kind) {
            case 'Variable':
                return value.name.value;
            case 'IntValue':
                return "i'" + value.value;
            case 'FloatValue':
                return "f'" + value.value;
            case 'EnumValue':
                return "e'" + value.value;
            case 'StringValue':
                return `s'${JSON.stringify(value.value)}`;
            case 'BooleanValue':
                return "b'" + String(value.value);
            case 'NullValue':
                return "<null>";
            case 'ListValue':
                return "[" + value.values.map(this.valueIdentityKey).join('-') + "]";
            case 'ObjectValue':
                const fields = value.fields.map(f => f.name.value + '-' + this.valueIdentityKey(f.value));
                fields.sort();
                return "{" + fields.join('-') + "}";
        }
    }
    static directiveIdentityKey(directive) {
        const argsKeys = directive.arguments
            ? directive.arguments.map(arg => arg.name.value + '-' + Scope.valueIdentityKey(arg.value))
            : [];
        argsKeys.sort();
        return `${directive.name.value}-${argsKeys.join('-')}`;
    }
    static directivesIdentityKey(directives) {
        const keys = directives.map(d => Scope.directiveIdentityKey(d));
        keys.sort();
        return keys.join('-');
    }
    computeIdentityKey() {
        const directivesKey = this.directives ? Scope.directivesIdentityKey(this.directives) : "";
        const enclosingKey = this.enclosing ? this.enclosing.computeIdentityKey() : "";
        return `${this.parentType}-${directivesKey}-${enclosingKey}`;
    }
    identityKey() {
        if (!this.cachedIdentityKey) {
            this.cachedIdentityKey = this.computeIdentityKey();
        }
        return this.cachedIdentityKey;
    }
    debugPrint() {
        let enclosingStr = '';
        if (this.enclosing) {
            enclosingStr = ' ' + this.enclosing.debugPrint();
        }
        let directiveStr = '';
        if (this.directives) {
            directiveStr = this.directives.map(d => ' @' + d.name.value).join(' ');
        }
        return `<${this.parentType}${directiveStr}${enclosingStr}>`;
    }
}
exports.Scope = Scope;
//# sourceMappingURL=Scope.js.map