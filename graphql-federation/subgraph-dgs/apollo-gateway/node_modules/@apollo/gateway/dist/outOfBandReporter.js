"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutOfBandReporter = exports.OUT_OF_BAND_REPORTER_QUERY = void 0;
const graphqlTypes_1 = require("./__generated__/graphqlTypes");
exports.OUT_OF_BAND_REPORTER_QUERY = `#graphql
  mutation OOBReport($input: APIMonitoringReport) {
    reportError(report: $input)
  }
`;
const { name, version } = require('../package.json');
class OutOfBandReporter {
    async submitOutOfBandReportIfConfigured({ error, request, response, startedAt, endedAt, tags, fetcher, }) {
        var _a, _b;
        if (!OutOfBandReporter.endpoint) {
            return;
        }
        let errorCode;
        if (!response) {
            errorCode = graphqlTypes_1.ErrorCode.ConnectionFailed;
        }
        else {
            switch (response.status) {
                case 400:
                case 413:
                case 422:
                    errorCode = graphqlTypes_1.ErrorCode.InvalidBody;
                    break;
                case 408:
                case 504:
                    errorCode = graphqlTypes_1.ErrorCode.Timeout;
                    break;
                case 502:
                case 503:
                    errorCode = graphqlTypes_1.ErrorCode.ConnectionFailed;
                    break;
                default:
                    errorCode = graphqlTypes_1.ErrorCode.Other;
            }
        }
        const responseBody = await (response === null || response === void 0 ? void 0 : response.text());
        const variables = {
            input: {
                error: {
                    code: errorCode,
                    message: error.message,
                },
                request: {
                    url: request.url,
                    body: await request.text(),
                },
                response: response
                    ? {
                        httpStatusCode: response.status,
                        body: responseBody,
                    }
                    : null,
                startedAt: startedAt.toISOString(),
                endedAt: endedAt.toISOString(),
                tags: tags,
            },
        };
        try {
            const oobResponse = await fetcher(OutOfBandReporter.endpoint, {
                method: 'POST',
                body: JSON.stringify({
                    query: exports.OUT_OF_BAND_REPORTER_QUERY,
                    variables,
                }),
                headers: {
                    'apollographql-client-name': name,
                    'apollographql-client-version': version,
                    'user-agent': `${name}/${version}`,
                    'content-type': 'application/json',
                },
            });
            const parsedResponse = await oobResponse.json();
            if (!((_a = parsedResponse === null || parsedResponse === void 0 ? void 0 : parsedResponse.data) === null || _a === void 0 ? void 0 : _a.reportError)) {
                throw new Error(`Out-of-band error reporting failed: ${oobResponse.status} ${oobResponse.statusText}`);
            }
        }
        catch (e) {
            throw new Error(`Out-of-band error reporting failed: ${(_b = e.message) !== null && _b !== void 0 ? _b : e}`);
        }
    }
}
exports.OutOfBandReporter = OutOfBandReporter;
OutOfBandReporter.endpoint = process.env.APOLLO_OUT_OF_BAND_REPORTER_ENDPOINT || null;
//# sourceMappingURL=outOfBandReporter.js.map